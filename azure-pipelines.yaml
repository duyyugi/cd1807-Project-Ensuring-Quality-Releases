name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise, comment out the line below.
#pool: myAgentPool

variables:
  python.version: "3.7.6"
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: "1dbe64f4-1fc6-49a4-ab78-2556cb70a1a0"
  azureServiceConnectionDeploymentId: "862ae063-436f-41d0-b05a-257ddb35311a"
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: "test"
  # Log agent
  AZURE_LOG_ANALYTICS_ID: "38207d47-485a-4da7-9220-1f718afc9d68"
  AZURE_LOG_ANALYTICS_PRIMARY_KEY: "+SGxNJWAyXyIsJ9xJvcELrSYfn5+qlTg6Ht4t+949gFpCY9NMzGOoPQQGHLuDTVmebjq+1Uyk19DnJWyHasoxw=="

stages:
  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: Build
    jobs:
      - job: BuildInfrastructure
        steps:
          #--------------------------------------------#
          # Use Terraform to create the Infrastructure
          # Install Terraform on the pipeline agent
          - task: TerraformInstaller@0
            displayName: "Terrafom installation"
            inputs:
              terraformVersion: "1.2.9"

          # Run Terraform Init on the pipeline agent
          # ToDo: Replace the resource group name, storage account name, and container name below
          - task: TerraformTaskV3@3
            displayName: "Terrafom init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tfstate2947021546"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"

          # ToDo: Run Terraform Validate
          - task: TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: "azurerm"
              command: "validate"

          # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it.
          # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module.
          # Install public key and private key file to the pipeline agent, using the task below.
          # ToDo: Change the inputs value below
          # - task: InstallSSHKey@0
          #   inputs:
          #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
          #     sshPublicKey: 'PUBLIC_KEY'            # variable value
          #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file

          # - task: DownloadSecureFile@1
          #  name: udacity_public_key
          #  displayName:
          #  inputs:
          #   secureFile:

          # Run Terraform Plan
          # ToDo: Change the workingDirectory path, as applicable to you
          - task: TerraformTaskV3@3
            displayName: Terraform plan
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"

          # Run Terraform Apply
          # ToDo: Change the workingDirectory path, as applicable to you
          - task: TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"

          # ToDo: Change the workingDirectory path, as applicable to you
          # Destroy the resources in Azure by running a separate pipeline.
          # - task: TerraformTaskV3@3
          #   displayName: Terraform destroy
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'destroy'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

          # --------------------------------------------#
          # Postman - Install Newman
          # ToDo: Update the command and verify the working directory
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: "sudo npm install -g newman"
              workingDirectory: $(System.DefaultWorkingDirectory)
          # Postman Data Validation Test Suite
          # ToDo: Verify the working directory and the newman scripts
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: newman run ValidationTest.json
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
          # Postman Regression Test Suite
          # ToDo: Update the command and verify the working directory
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: newman run RegressionTest.json
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
          # Postman - Publish Results
          # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/TEST-*.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/automatedtesting/postman/"
              mergeTestResults: true
              testRunTitle: "Run regression and validation test"

          #--------------------------------------------#
          # Selenium (UI) Test Suite - Archive the package
          # "ArchiveFiles@2" picks up the web package and archives it.
          - task: ArchiveFiles@2
            displayName: "Archive UI Tests"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip"
          # Selenium Test Suite - Publish the package
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip # Same as the archiveFile artifact above.
            displayName: "publish uitests"
            artifact: drop-uitests

          #--------------------------------------------#
          # FakeRestAPI - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
          # FakeRestAPI - Publish
          - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
            displayName: "publish fakerestapi"
            artifact: drop-fakerestapi

          #--------------------------------------------#
          # JMeter (Performance) Test Suite - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          - task: ArchiveFiles@2
            displayName: "Archive PerformanceTestSuite"
            inputs:
              rootFolderOrFile: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-performancetestsuit.zip"
          # JMeter Test Suite - Publish
          - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-performancetestsuit.zip"
            displayName: "publish performancetestsuit"
            artifact: drop-performancetestsuit

  #--------------------------------------------#
  # DEPLOYMENT STAGE
  #--------------------------------------------#
  - stage: Deploy
    jobs:
      #--------------------------------------------#
      # Deploy FakeRestAPI Web App
      # ToDo: Provide <environment name> you created in your DevOps project
      - deployment: FakeRestAPI
        pool:
          vmImage: "Ubuntu-18.04"
        environment:
          name: test
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: "$(azureServiceConnectionDeploymentId)"
                    appName: "p3UdacityDuyyugi-AppService"
                    appType: webApp
                    package: "$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
                #--------------------------------------------#
                # Run JMeter test suite against the App Service
                # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, and run the PerformanceTestSuite.
                # ToDo: Generate the log file.
                - task: CmdLine@2
                  displayName: "Install JMeter"
                  inputs:
                    workingDirectory: $(Pipeline.Workspace)/drop-performancetestsuit
                    script: |
                      sudo apt-get install openjdk-11-jre-headless -y
                      wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
                      tar xzvf jmeter.tgz
                      sudo apt-get install unzip
                      unzip -o "$(Build.BuildId)-performancetestsuit.zip"
                      mkdir -p jmeterlog
                      pwd
                      ls -la
                - task: CmdLine@2
                  displayName: "Run Endurance Test"
                  inputs:
                    workingDirectory: $(Pipeline.Workspace)/drop-performancetestsuit
                    script: apache-jmeter-5.4/bin/jmeter -n -t EnduranceTest.jmx -l jmeterlog/endurance_test_result.csv -e -o jmeterlog/endurance-test-html-report
                - task: CmdLine@2
                  displayName: "Run Stress Test"
                  inputs:
                    workingDirectory: $(Pipeline.Workspace)/drop-performancetestsuit
                    ## clear test to run next time
                    script: |
                      apache-jmeter-5.4/bin/jmeter -n -t StressTest.jmx -l jmeterlog/stress_test_result.csv -e -o jmeterlog/stress-test-html-report
                      rm -r jmeterlog

      #     #--------------------------------------------#
      # Selenium | Functional UI Tests
      # ToDo:
      - deployment: VMDeploy
        displayName: Selenium Tests
        environment:
          name: test
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-uitests

                - task: Bash@3
                  displayName: "Run UI Test"
                  inputs:
                    workingDirectory: $(Pipeline.Workspace)/drop-uitests
                    targetType: "inline"
                    script: |
                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      chromium-browser -version
                      sudo apt-get install -y chromium-chromedriver
                      chromedriver --version
                      pip3 install -U selenium
                      # Install Log Analytics agent on Linux computers (only need to run once)
                      wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
                      sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
                      sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
                      unzip -o "$(Build.BuildId)-uitests.zip"
                      sudo python3 login.py
